"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"               DEFAULT ~/.vimrc by Xavier Oswald (x.oswald@free.fr)          "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set cf               " enable error files and error jumping
set nocompatible     " Use Vim settings, rather then Vi settings (much better!).
set autowrite        " Automatically save before :next, :make etc.
set history=100       " 50 commands in the history
set viminfo='100,<1000,s10,h " read/write a .viminfo file, don't store more than 1000 yanked lines per register
filetype plugin on   " load filetype plugins
filetype indent on   " load filetype indents
filetype on          " detect the type of file
set backspace=indent,eol,start	" more powerful backspacing
set title						 " change title of the terminal if it's possible
"set notitle
"set mouse=a

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Theme/Colors
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax on            " active coloration
"set background=black  " default background
colorscheme elflord  " default coloration theme
"colorscheme torte
"NOTE: nice theme is 'colorsheme elflord' if you have a dark background

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Files/Backups 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set backup                   " make backup file
set backupdir=~/.vim/backup/ " where to put backup file
set directory=~/.vim/temp    " directory is the directory for temp file
set makeef=error.err         " When using make, where should it dump the file
set backupskip=/tmp/*,/private/tmp/*"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim UI 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set ruler               " show the cursor position all the time
set cmdheight=2         " the command bar is 2 high
set hid                 " you can change buffer without saving
set switchbuf=usetab   " jump on the first window with the buffer
set backspace=2         " make backspace work normal
set report=0            " tell us when anything is changed via :...
set ignorecase          " ignore case for searching
"set smartcase           " case sensitive search if the search contains an upper character

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Visual Cues 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set showmatch     " show matching brackets
set mat=5         " how many tenths of a second to blink matching brackets for
set hlsearch    " do not highlight searched for phrases
set incsearch     " BUT do highlight as you type you search phrase
set so=10         " Keep 10 lines (top/bottom) for scope
set novisualbell  " don't blink
set noerrorbells  " no noise
set laststatus=2  " always show the status line
set showcmd       " display incomplete commands
set modeline      " display the current mode
set nostartofline " keep the cursor in the same colon when changing line
"set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [ASCII=\%03.3b]\ [HEX=\%02.2B]\ [POS=%04l,%04v][%p%%]\ [LEN=%L]
set statusline=%<%F%(\ %m%r%h%w%([%Y]%)%)%=\ %04v,\ %04l/%04L\ (%P)
set number           " display lines
"set listchars=nbsp:¤,tab:>-,trail:¤,extends:>,precedes:<
set list
set cursorline
"set spell

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Menu 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set wildmenu " menu completion
set wildmode=longest:full,full
cnoremap <Left> <Space><BS><Left>
cnoremap <Right> <Space><BS><Right>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Text Formatting/Layout 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set fo=tcrqn      " See Help (complex)
set ai            " autoindent
set si            " smartindent
set cindent       " do c-style identing
set tabstop=4     " tab spacing
set softtabstop=4 " 2 spaces when pressing <tab> unify
set shiftwidth=4  " unify
set expandtab
"set noexpandtab   " real tabs please!
"set smarttab      " use tabs at the start of a line, spaces elsewhere

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Perl 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let perl_extended_vars=1 " highlight advanced perl vars inside strings

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Autocommands 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType text setlocal textwidth=80
autocmd FileType mak setlocal noexpandtab

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Lisaac special support 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
au BufNewFile,BufRead *.li setf lisaac

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Promela support
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
au BufNewFile,BufRead *.promela setf promela

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Correction orthographique automatique pour tout les fichiers 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
augroup filetypedetect
au BufNewFile,BufRead * setlocal spelllang=en
au FileType text,svn,gitcommit setlocal spell
augroup END

""""""""""""""""""""""""""""""""""""""""""""""""""
" Toggle option 'spell'
""""""""""""""""""""""""""""""""""""""""""""""""""
function! ToggleSpell()
  if &spell
    set nospell
    echo "Correction désactivé."
  else
    set spell
    echo "Correction activé."
  end
endfunction

noremap     <silent>    <F9> ]s
inoremap    <silent>    <F9> <Esc>]sa

noremap     <silent>    <S-F9> [s
inoremap    <silent>    <S-F9> <Esc>[sa

noremap     <silent>    <F10> :call ToggleSpell()<cr>
inoremap    <silent>    <F10> <Esc>:call ToggleSpell()<cr>a

noremap     <silent>    <TAB> z=

""""""""""""""""""""""""""""""""""""""""""""""""""
" Dictionnaire français
""""""""""""""""""""""""""""""""""""""""""""""""""
set dictionary+=/usr/share/dict/french

""""""""""""""""""""""""""""""""""""""""""""""""""
" Complétion par tabulation
""""""""""""""""""""""""""""""""""""""""""""""""""
"function! CleverTab()
    "check if at beginning of line of after a space
    "if strpart(getline('.'), 0, col('.')-1) =~ '\(^\|\s\+\)$'
    "return "\<Tab>"
    "else 
    "use know-word completion
    "return "\<C-N>"
    "endif
"endfunction

"Mapping sur la touche Tab
"inoremap <Tab> <C-R>=CleverTab()<CR>

"Debut de Completion
function InsertTabWrapper(direction)
    if pumvisible()
        if -1 == a:direction
            return "\<C-P>"
        else
            return "\<C-N>"
        endif
    endif

    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<TAB>"
    elseif 0 == a:direction
        return "\<C-X>\<C-K>"
    "elseif exists('&omnifunc') && &omnifunc != ''
    "    return "\<C-X>\<C-O>"
    else
        return "\<C-N>"
    endif
endfunction

inoremap <silent> <Tab>     <C-R>=InsertTabWrapper(1)<CR>
inoremap <silent> <S-Tab>   <C-R>=InsertTabWrapper(-1)<CR>
inoremap <silent> <F11>     <C-R>=InsertTabWrapper(0)<CR>
" Fin de Completion

""""""""""""""""""""""""""""""""""""""""""""""""""
" Omni-completion par CTRL-X_CTRL-O
"""""""""""""""""""""""""""""""""""""""""""""""""""
au filetype html        set omnifunc=htmlcomplete#CompleteTags
au filetype css         set omnifunc=csscomplete#CompleteCSS
au filetype javascript  set omnifunc=javascriptcomplete#CompleteJS
au filetype java        set omnifunc=javacomplete#Complete
au filetype c           set omnifunc=ccomplete#Complete
"au filetype php         set omnifunc=phpcomplete#CompletePHP
au filetype ruby        set omnifunc=rubycomplete#Complete
au filetype sql         set omnifunc=sqlcomplete#Complete
au filetype python      set omnifunc=pythoncomplete#Complete
au filetype xml         set omnifunc=xmlcomplete#CompleteTags

""""""""""""""""""""""""""""""""""""""""""""""""""
" Mapping :make et :cwindow
""""""""""""""""""""""""""""""""""""""""""""""""""
noremap     <F5> :make<cr>
inoremap    <F5> <Esc>:make<cr>a

noremap     <S-F5> :make!<cr>
inoremap    <S-F5> <Esc>:make!<cr>a

noremap     <C-F5> :make
inoremap    <C-F5> <Esc>:make

noremap     <F6> :cc<cr>
inoremap    <F6> <Esc>:cc<cr>a

noremap     <F7> :cnext<cr>
inoremap    <F7> <Esc>:cnext<cr>a

noremap     <S-F7> :cprevious<cr>
inoremap    <S-F7> <Esc>:cprevious<cr>a

" Toggle the quickfix window.
command QFix call QFixToggle()
function! QFixToggle()
  if exists("g:qfix_win")
    cclose
  else
    botright copen 10
    wincmd p
  endif
endfunction

" used to track the quickfix window
augroup QFixToggle
 autocmd!
 autocmd BufWinEnter quickfix let g:qfix_win = bufnr("$")
 autocmd BufWinEnter quickfix setlocal statusline=%F\ [%l/%L\ (%P)]
 autocmd BufWinEnter quickfix setlocal nospell
 autocmd BufWinLeave * if exists("g:qfix_win") && expand("<abuf>") == g:qfix_win | unlet! g:qfix_win | endif
augroup END

nmap <silent> <F8> :QFix<CR>

" Close vim even if a quickfix window is open.
au BufEnter * call MyLastWindow()
function! MyLastWindow()
  " if the window is quickfix go on
  if &buftype=="quickfix"
    " if this window is last on screen quit without warning
    if winbufnr(2) == -1
      quit!
    endif
  endif
endfunction

set encoding=utf-8
setglobal fileencoding=utf-8
"set bomb
set termencoding=utf-8

nmap <Esc>[1;2A :wincmd k<CR>
nmap <Esc>[1;2B :wincmd j<CR>
nmap <Esc>[1;2D :wincmd h<CR>
nmap <Esc>[1;2C :wincmd l<CR>

nmap <Esc>[1;5C gt
nmap <Esc>[1;5D gT

"sessions :
set sessionoptions=buffers,curdir,resize,tabpages,winpos,winsize,localoptions "only save buffers and current dir

nnoremap <C-l> :source ~/.vim/session<CR>

autocmd VimLeavePre * call SaveSession() "autosave on close
autocmd VimEnter * call RestoreSession()

function! RestoreSession()
	if argc()==0
		if filereadable(expand("~/.vim/session"))
			source ~/.vim/session
		endif
	endif
endfunction

function! SaveSession()
	mksession! ~/.vim/session
endfunction

set fileformats=unix,dos,mac
set fileencodings=ucs-bom,utf-8,default,mac,latin1

au! BufNewFile,BufRead *.make setfiletype make
au! BufRead,BufNewFile *.rst set spell
au! BufRead,BufNewFile *.tex set spell
au! BufRead,BufNewFile *.ChangeLog setfiletype Changelog
au! BufRead,BufNewFile *.Changelog setfiletype Changelog

compiler! gcc

map! <silent> <Esc>/ \
map! <silent> <Esc>L \|
map! <silent> <Esc>5 [
map! <silent> <Esc>° ]

cnoremap <C-a> <C-b>

set tags+=tags;/
